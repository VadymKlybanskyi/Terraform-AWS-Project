name: "Packer Build & Terraform CI/CD"

on:
  workflow_dispatch:  # Starting only manually
  push:
   branches:
      - main # Perform a pipeline when there are pushes to the main branch
  # paths:
  #    - project/*

  pull_request:
    branches:
      - main
    paths:
      - project/* # Perform a pipeline when there is a pull_request to the main branch
      
jobs:
  packer-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Packer
        uses: hashicorp/setup-packer@v2

      - name: Initialize Packer
        run: packer init ./project/packer

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity

      - name: Check current directory
        run: |
          ls -alh $GITHUB_WORKSPACE/project/packer    

      - name: Packer Build
        run: |
          cd $GITHUB_WORKSPACE/project/packer
          packer build packer.pkr.hcl
          # Save the ID of the new AMI built by Packer
          new_ami_id=$(aws ec2 describe-images --filters "Name=name,Values=new-ami" --query "Images[0].ImageId" --output text)
          echo "New AMI ID: $new_ami_id"

      - name: Clean up old AMIs
        run: |
          # Retrieve a list of all AMIs
          ami_ids=$(aws ec2 describe-images --owners self --query "Images[].[ImageId,CreationDate]" --output text)
          echo "Retrieved AMI IDs and Creation Dates: $ami_ids"

          # Add the newly created AMI to the list, if it exists
          ami_ids="$ami_ids $new_ami_id"
          
          # Sort AMIs by creation date (oldest first)
          ami_ids_sorted=$(echo "$ami_ids" | sort -k2)

          # Count the number of AMIs
          ami_count=$(echo "$ami_ids_sorted" | wc -l)
          if [ "$ami_count" -gt 3 ]; then
            # Remove older AMIs, keeping only the latest 3
            ami_to_delete=$(echo "$ami_ids_sorted" | head -n -3 | awk '{print $1}') # Use only AMI IDs
            for ami in $ami_to_delete; do
              echo "Deregistering AMI $ami"
              aws ec2 deregister-image --image-id $ami
            done
          else
            echo "No old AMIs to delete. Keeping only the most recent 3."
          fi

  setup-aws:
    runs-on: ubuntu-latest
    needs: packer-build
    steps:
      # Checkout репозиторію
      - name: Checkout code
        uses: actions/checkout@v4

      # Login to AWS using AWS CLI
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Verify AWS credentials
      - name: Verify AWS credentials
        run: |
          aws sts get-caller-identity

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ">= 1.10.0"
          terraform_wrapper: false

      # Format Terraform files
      - name: Terraform Format
        id: fmt
        run: |
          cd $GITHUB_WORKSPACE/project/project_dev
          terraform fmt .

      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: |
          cd $GITHUB_WORKSPACE/project/project_dev
          terraform init

      # Validate Terraform configuration
      - name: Terraform Validate
        run: |
          cd $GITHUB_WORKSPACE/project/project_dev
          terraform validate

      # Terraform Plan (only for pull request)
      - name: Terraform Plan
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          cd $GITHUB_WORKSPACE/project/project_dev
          terraform plan
     
      # Apply Terraform changes (only for push to the terraform branch)
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/terraform'
        run: |
          cd $GITHUB_WORKSPACE/project/project_dev
          terraform apply -auto-approve
